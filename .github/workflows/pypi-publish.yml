# 定义 GitHub Actions 工作流的名称
name: Publish Python Package

# 定义触发工作流的事件
on:
  # 当有新的标签推送到仓库时触发
  push:
    tags:
      # 只匹配以 v 开头的标签
      - v*

# 定义工作流中的任务
jobs:
  # 定义一个名为 deploy 的任务
  deploy:
    # 指定任务运行的环境
    runs-on: ubuntu-latest
    # 定义任务所需的权限
    permissions:
      # 允许读取仓库内容
      contents: read

    # 定义任务的步骤
    steps:
    # 使用 actions/checkout 动作来检出代码
    - uses: actions/checkout@v4
      with:
        # 拉取所有历史记录
        fetch-depth: 0

    # 设置 Python 环境
    - name: Set up Python
      # 使用 actions/setup-python 动作来设置 Python 环境
      uses: actions/setup-python@v5
      with:
        # 使用 Python 3.x 版本
        python-version: '3.x'

    # 提取并验证版本号
    - name: Extract and Validate Version
      run: |
        # 从 GITHUB_REF 环境变量中提取标签名
        TAG_NAME=${GITHUB_REF#refs/tags/}
        # 去掉标签名前面的 v 字符
        VERSION=${TAG_NAME#v}
        # 验证版本号是否符合 X.Y.Z 格式
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          # 若不符合格式，输出错误信息
          echo "::error::Invalid version format: $VERSION. Use X.Y.Z"
          # 退出脚本并返回错误码 1
          exit 1
        fi
        # 将版本号添加到 GITHUB_ENV 环境变量中
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    # 安装构建工具
    - name: Install Build Tools
      run: |
        # 升级 pip 到最新版本
        python -m pip install --upgrade pip
        # 安装 setuptools、build 和 twine 工具
        pip install "setuptools>=61.0" build twine

    # 验证 pyproject.toml 文件
    - name: Validate pyproject.toml
      run: |
        # 检查 pyproject.toml 文件中是否包含指定的构建后端配置
        if ! grep -q 'build-backend = "setuptools.build_meta"' pyproject.toml; then
          # 若不包含，输出错误信息
          echo "::error::Invalid build-backend configuration"
          # 退出脚本并返回错误码 1
          exit 1
        fi

    # 清理之前的构建产物
    - name: Clean previous builds
      run: |
        # 删除 dist 目录下的所有文件
        rm -rf dist/*
        # 删除 build 目录下的所有文件
        rm -rf build/*

    # 更新包的版本号
    - name: Update package version
      run: |
        # 使用 sed 命令替换 src/ncatbot/__init__.py 文件中的版本号
        sed -i "s/^__version__ = .*/__version__ = \"${{ env.VERSION }}\"/" src/ncatbot/__init__.py

    # 构建 Python 包
    - name: Build Package
      run: python -m build --sdist --wheel --outdir dist/

    # 发布包到 PyPI
    - name: Publish to PyPI
      env:
        # 从 GitHub 仓库的 secrets 中获取 PyPI API 令牌
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        # 使用 twine 工具将构建好的包上传到 PyPI
        twine upload --username __token__ --password "$PYPI_TOKEN" dist/*
